from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ —Ö—Ä–∞–Ω–∏—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚öôÔ∏è –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–û–ö–ï–ù –û–¢ @BotFather
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# üß† –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
subscribers = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    await update.message.reply_text(
        "üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ê–±—Å–æ–ª—é—Ç–Ω—É—é –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å*.\n\n"
        "üì© –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî –≤—Å–µ –ø–æ–ª—É—á–∞—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üë§ –ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞. –ù–∏–∫–æ–≥–¥–∞. –î–∞–∂–µ —è.\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞—á–∏–Ω–∞–π üëá",
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)

    if update.message.text:
        content = update.message.text
        is_voice = False
    elif update.message.voice:
        content = update.message.voice.file_id
        is_voice = True
    else:
        await update.message.reply_text("–ü—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = "üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:" if not is_voice else "üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ:"

    failed_ids = set()
    for target_id in list(subscribers):
        try:
            await context.bot.send_message(chat_id=target_id, text=broadcast_text)
            if is_voice:
                await context.bot.send_voice(chat_id=target_id, voice=content)
            else:
                await context.bot.send_message(chat_id=target_id, text=content)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {target_id}: {e}")
            failed_ids.add(target_id)

    # –ß–∏—Å—Ç–∏–º –º–µ—Ä—Ç–≤—ã–µ —á–∞—Ç—ã
    for bad_id in failed_ids:
        subscribers.discard(bad_id)

    await update.message.reply_text("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –≤—Å–µ–º.")

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT | filters.VOICE, handle_message))

    logger.info("üöÄ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞.")

    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π (–∫–æ—Å—Ç—ã–ª—å –¥–ª—è Replit)
    try:
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        asyncio.run(asyncio.sleep(5))
        main()

if __name__ == '__main__':
    main()
